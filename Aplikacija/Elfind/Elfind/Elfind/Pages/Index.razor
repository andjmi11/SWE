@*@page "/"*@
@using Elfind.Data.Services
@using Elfind.Data.Model
@inject StudentService studentService
@inject KursService kursService
@inject CasService casService
@inject ProstorijaService prostorijaService
@inject ZgradaService zgradaService
@inject IJSRuntime js


<PageTitle>Index</PageTitle>


@*<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity.Name!</h1>
    </Authorized>
    <NotAuthorized>
        <h1>Hello, Guest!</h1>
    </NotAuthorized>
</AuthorizeView>

Welcome to your new app.


<AuthorizeView>
    <Authorized>
        <br /><br />
        <button class="btn btn-outline-primary" @onclick="DisplayGreetingAlert">Display Greeting Alert</button>
    </Authorized>
</AuthorizeView>
*@
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private async Task DisplayGreetingAlert()
    {
        var authState = await authenticationState;
        var message = $"Hello {authState.User.Identity.Name}";
        await js.InvokeVoidAsync("alert", message);
    }
}

@*ako nekom nesto treba nek otkomentarise s tim sto nista nece da se vidi jer sam stavila da je putanja do mape isto /,
tako da obrisite drugi @page iz Mapa.razor ako smeta i ubacite to u index*@


@*<EditForm Model="@student" OnValidSubmit="StudentSubmit">
    <div>Student</div>
    <label for="ImeInput">Ime</label>
    <InputText id="ImeUnput" @bind-Value="@student.Ime"> </InputText>
    <br/>

    <label for="PrezimeInput">Prezime</label>
    <InputText id="PrezimeInpit" @bind-Value="@student.Prezime"> </InputText>
    <br />

     <label for="RoleInput">Role</label>
    <InputText id="RoleInput" @bind-Value="@student.Role"> </InputText>
    <br />

    <label for="KorisnickoImeInput">Korisnicko ime</label>
    <InputText id="KorisnickoImeInput" @bind-Value="@student.KorisnickoIme"> </InputText>
    <br />

    <label for="PassInput">Lozinka</label>
    <InputText id="PassInput" @bind-Value="@student.HashLozinka"> </InputText>
    <br />

    <button type="submit" class="btn-primary">Create</button>
    <br />
</EditForm>*@

   @* @code{
        Student student = new Student();

    public void StudentSubmit(EditContext editContext)
    {
        Student noviStudent = (Student)editContext.Model;

        studentService.dodajStudenta(noviStudent);
    }
}*@

@*<EditForm Model="@prostorija" OnValidSubmit="ProstorijaSubmit">
    <div>Prostorija</div>
    <label for="OznakaInput">Oznaka</label>
    <InputText id="OznakaInput" @bind-Value="@prostorija.Oznaka"> </InputText>
    <br/>

    <label for="SpratInput">Sprat</label>
    <InputText id="SpratInput" @bind-Value="@prostorija.Sprat"> </InputText>
    <br />


    @*razmisliti kako unosimo coord*@
    @*
    <label for="DownRightXInput">DownRightX</label>
    <InputNumber id="DownRightXInput" @bind-Value="@prostorija.DownRightX"> </InputNumber>
    <br />

    <label for="DownRightYInput">DownRightY</label>
    <InputNumber id="DownRightYInput" @bind-Value="@prostorija.DownRightY"> </InputNumber>
    <br />

    <label for="LeftUpXInput">LeftUpX</label>
    <InputNumber id="LeftUpXInput" @bind-Value="@prostorija.LeftUpX"> </InputNumber>
    <br />

    <label for="LeftUpYInput">LeftUpY</label>
    <InputNumber id="LeftUpYInput" @bind-Value="@prostorija.LeftUpY"> </InputNumber>
    <br />

    <label for="KapacitetInput">Kapacitet</label>
    <InputNumber id="KapacitetInput" @bind-Value="@prostorija.Kapacitet"> </InputNumber>
    <br />

    <label for="TipProstorijeInput">TipProstorije</label>
    <InputSelect id="TipProstorijeInput" @bind-Value="@prostorija.TipProstorije"> 
        @foreach(var tip in Enum.GetValues(typeof(TipP)))
        {
            <option value="@tip">@tip</option>
        }
    </InputSelect>
    <br />

    @*sta se desava sa atributima koji su objekti videcemo*@
    
   @* <button type="submit" class="btn-primary">Create</button>
    <br />
</EditForm>*@

@*@code{
    Prostorija prostorija = new Prostorija();

    public void ProstorijaSubmit(EditContext editContext)
    {
        Prostorija novaProstorija = (Prostorija)editContext.Model;

        prostorijaService.dodajProstoriju(novaProstorija);
    }
}*@


@*<EditForm Model="@zgrada" OnValidSubmit="ZgradaSubmit">
    <div>Zgrada</div>
    <label for="TipInput">Tip</label>
    <InputSelect id="TipInput" @bind-Value="@zgrada.Tip">
        @foreach (var tip in Enum.GetValues(typeof(TipZgrade)))
        {
            <option value="@tip">@tip</option>
        }
    </InputSelect>
    <br />

    <button type="submit" class="btn-primary">Create</button>
    <br />

</EditForm>*@

@*@code {
    Zgrada zgrada = new Zgrada();

    public void ZgradaSubmit(EditContext editContext)
    {
        Zgrada novaZgrada = (Zgrada)editContext.Model;

        zgradaService.dodajZgradu(novaZgrada);
    }
}*@
@*<EditForm Model="@cas" OnValidSubmit="CasSubmit">
    <div>Cas</div>

    <label for="NazivInput">Naziv</label>
    <InputText id="NazivInput" @bind-value="@cas.Naziv"></InputText>
    <br />


</EditForm>

@code {
    Cas cas = new Cas();

    public void CasSubmit(EditContext editContext)
    {
        Cas noviCas = (Cas)editContext.Model;

        casService.dodajCas(noviCas);
    }
}

<EditForm Model="@kurs" OnValidSubmit="KursSubmit">


</EditForm>

@code{
    Kurs kurs = new Kurs();

    public void KursSubmit(EditContext editContext)
    {
        Kurs noviKurs = (Kurs)editContext.Model;

        kursService.dodajKurs(noviKurs);
    }
<<<<<<< HEAD
=======
<<<<<<< HEAD
}*@
