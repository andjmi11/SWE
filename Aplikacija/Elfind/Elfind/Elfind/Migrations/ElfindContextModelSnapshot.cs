// <auto-generated />
using System;
using Elfind.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Elfind.Migrations
{
    [DbContext(typeof(ElfindContext))]
    partial class ElfindContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Elfind.Data.Model.Administrator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Administratori", (string)null);
                });

            modelBuilder.Entity("Elfind.Data.Model.Cas", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Dan")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProstorijaID")
                        .HasColumnType("int");

                    b.Property<int>("TipCasa")
                        .HasColumnType("int");

                    b.Property<int?>("URasporeduCasovaID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("VremeDo")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("VremeOd")
                        .HasColumnType("time");

                    b.Property<int?>("ZaKursID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProstorijaID");

                    b.HasIndex("URasporeduCasovaID");

                    b.HasIndex("ZaKursID");

                    b.ToTable("Casovi");
                });

            modelBuilder.Entity("Elfind.Data.Model.Forum", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("NazivForuma")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Forum");
                });

            modelBuilder.Entity("Elfind.Data.Model.Kurs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Godina")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Kursevi");
                });

            modelBuilder.Entity("Elfind.Data.Model.NastavnoOsoblje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KancelarijaID")
                        .HasColumnType("int");

                    b.Property<string>("KorisnickoIme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Prisustvo")
                        .HasColumnType("bit");

                    b.Property<string>("Tip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("KancelarijaID");

                    b.ToTable("NastavnoOsoblje", (string)null);
                });

            modelBuilder.Entity("Elfind.Data.Model.Objava", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ForumID")
                        .HasColumnType("int");

                    b.Property<int?>("OdNastavnogOsobljaID")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipObjave")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ForumID");

                    b.HasIndex("OdNastavnogOsobljaID");

                    b.ToTable("Objave");
                });

            modelBuilder.Entity("Elfind.Data.Model.Prostorija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<float>("DownRightX")
                        .HasColumnType("real");

                    b.Property<float>("DownRightY")
                        .HasColumnType("real");

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<float>("LeftUpX")
                        .HasColumnType("real");

                    b.Property<float>("LeftUpY")
                        .HasColumnType("real");

                    b.Property<string>("Oznaka")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int?>("PripadaZgradiID")
                        .HasColumnType("int");

                    b.Property<int?>("SpratID")
                        .HasColumnType("int");

                    b.Property<int>("TipProstorije")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PripadaZgradiID");

                    b.HasIndex("SpratID");

                    b.ToTable("Prostorije");
                });

            modelBuilder.Entity("Elfind.Data.Model.RasporedCasova", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AdministratorID")
                        .HasColumnType("int");

                    b.Property<int>("ZaGodinu")
                        .HasColumnType("int");

                    b.Property<int?>("ZaSmerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AdministratorID");

                    b.HasIndex("ZaSmerID");

                    b.ToTable("ResporediCasova");
                });

            modelBuilder.Entity("Elfind.Data.Model.Smer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipStudija")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Smerovi");
                });

            modelBuilder.Entity("Elfind.Data.Model.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Godina")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Indeks")
                        .HasColumnType("int");

                    b.Property<string>("KorisnickoIme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NaSmeruID")
                        .HasColumnType("int");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RasporedCasovaID")
                        .HasColumnType("int");

                    b.Property<int>("TipStudija")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NaSmeruID");

                    b.HasIndex("RasporedCasovaID");

                    b.ToTable("Studenti", (string)null);
                });

            modelBuilder.Entity("Elfind.Data.Model.Zgrada", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Tip")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Zgrade");
                });

            modelBuilder.Entity("Elfind.Data.Models.KursSmer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("KursID")
                        .HasColumnType("int");

                    b.Property<int?>("SmerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KursID");

                    b.HasIndex("SmerID");

                    b.ToTable("KursSmerSpoj");
                });

            modelBuilder.Entity("Elfind.Data.Models.NotifikacijaStudent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("NotifikacijaMsgID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<bool>("VidjenaPoruka")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("NotifikacijaMsgID");

                    b.HasIndex("StudentID");

                    b.ToTable("NotifikacijaStudent");
                });

            modelBuilder.Entity("Elfind.Data.Models.ObjavaStudent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ObjavaID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ObjavaID");

                    b.HasIndex("StudentID");

                    b.ToTable("ObjavaStudent");
                });

            modelBuilder.Entity("Elfind.Data.Models.Opcija", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("AnketaID")
                        .HasColumnType("int");

                    b.Property<int>("BrojGlasova")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AnketaID");

                    b.ToTable("Opcije");
                });

            modelBuilder.Entity("Elfind.Data.Models.OsobljeKurs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("KursID")
                        .HasColumnType("int");

                    b.Property<int?>("NastavnoOsobljeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KursID");

                    b.HasIndex("NastavnoOsobljeID");

                    b.ToTable("OsobljeKursSpoj");
                });

            modelBuilder.Entity("Elfind.Data.Models.OsobljeProstorijaR", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("NastavnoOsobljeID")
                        .HasColumnType("int");

                    b.Property<int?>("ProstorijaID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("VremeDo")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("VremeOd")
                        .HasColumnType("time");

                    b.Property<DateTime>("datum")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("NastavnoOsobljeID");

                    b.HasIndex("ProstorijaID");

                    b.ToTable("OsobljeProstorijaRSpoj");
                });

            modelBuilder.Entity("Elfind.Data.Models.OsobljeRaspored", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("NastavnoOsobljeID")
                        .HasColumnType("int");

                    b.Property<int?>("RasporedCasovaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("NastavnoOsobljeID");

                    b.HasIndex("RasporedCasovaID");

                    b.ToTable("OsobljeRasporedSpoj");
                });

            modelBuilder.Entity("Elfind.Data.Models.Sprat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZgradaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ZgradaID");

                    b.ToTable("Spratovi");
                });

            modelBuilder.Entity("Elfind.Data.Models.StudentKurs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("KursID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KursID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentKursSpoj");
                });

            modelBuilder.Entity("Elfind.Data.NotificationMessage", b =>
                {
                    b.Property<int>("MsgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MsgID"));

                    b.Property<string>("Kurs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MsgBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MsgDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MsgID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Elfind.Data.NotificationMessageProf", b =>
                {
                    b.Property<int>("MsgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MsgID"));

                    b.Property<string>("Cas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MsgBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MsgDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NastavnoOsobljeID")
                        .HasColumnType("int");

                    b.Property<string>("ReceiveEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("VidjenaPoruka")
                        .HasColumnType("bit");

                    b.HasKey("MsgID");

                    b.HasIndex("NastavnoOsobljeID");

                    b.ToTable("NotificationProf");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Elfind.Data.Model.Cas", b =>
                {
                    b.HasOne("Elfind.Data.Model.Prostorija", "Prostorija")
                        .WithMany()
                        .HasForeignKey("ProstorijaID");

                    b.HasOne("Elfind.Data.Model.RasporedCasova", "URasporeduCasova")
                        .WithMany("SpisakCasova")
                        .HasForeignKey("URasporeduCasovaID");

                    b.HasOne("Elfind.Data.Model.Kurs", "ZaKurs")
                        .WithMany("Casovi")
                        .HasForeignKey("ZaKursID");

                    b.Navigation("Prostorija");

                    b.Navigation("URasporeduCasova");

                    b.Navigation("ZaKurs");
                });

            modelBuilder.Entity("Elfind.Data.Model.NastavnoOsoblje", b =>
                {
                    b.HasOne("Elfind.Data.Model.Prostorija", "Kancelarija")
                        .WithMany("NastavnoOsobljeUKancelariji")
                        .HasForeignKey("KancelarijaID");

                    b.Navigation("Kancelarija");
                });

            modelBuilder.Entity("Elfind.Data.Model.Objava", b =>
                {
                    b.HasOne("Elfind.Data.Model.Forum", "Forum")
                        .WithMany("Objave")
                        .HasForeignKey("ForumID");

                    b.HasOne("Elfind.Data.Model.NastavnoOsoblje", "OdNastavnogOsoblja")
                        .WithMany("Objave")
                        .HasForeignKey("OdNastavnogOsobljaID");

                    b.Navigation("Forum");

                    b.Navigation("OdNastavnogOsoblja");
                });

            modelBuilder.Entity("Elfind.Data.Model.Prostorija", b =>
                {
                    b.HasOne("Elfind.Data.Model.Zgrada", "PripadaZgradi")
                        .WithMany("Prostorije")
                        .HasForeignKey("PripadaZgradiID");

                    b.HasOne("Elfind.Data.Models.Sprat", "Sprat")
                        .WithMany("ListaProstorija")
                        .HasForeignKey("SpratID");

                    b.Navigation("PripadaZgradi");

                    b.Navigation("Sprat");
                });

            modelBuilder.Entity("Elfind.Data.Model.RasporedCasova", b =>
                {
                    b.HasOne("Elfind.Data.Model.Administrator", "Administrator")
                        .WithMany("RasporediCasova")
                        .HasForeignKey("AdministratorID");

                    b.HasOne("Elfind.Data.Model.Smer", "ZaSmer")
                        .WithMany()
                        .HasForeignKey("ZaSmerID");

                    b.Navigation("Administrator");

                    b.Navigation("ZaSmer");
                });

            modelBuilder.Entity("Elfind.Data.Model.Student", b =>
                {
                    b.HasOne("Elfind.Data.Model.Smer", "NaSmeru")
                        .WithMany()
                        .HasForeignKey("NaSmeruID");

                    b.HasOne("Elfind.Data.Model.RasporedCasova", "RasporedCasova")
                        .WithMany()
                        .HasForeignKey("RasporedCasovaID");

                    b.Navigation("NaSmeru");

                    b.Navigation("RasporedCasova");
                });

            modelBuilder.Entity("Elfind.Data.Models.KursSmer", b =>
                {
                    b.HasOne("Elfind.Data.Model.Kurs", "Kurs")
                        .WithMany("Smerovi")
                        .HasForeignKey("KursID");

                    b.HasOne("Elfind.Data.Model.Smer", "Smer")
                        .WithMany("Kursevi")
                        .HasForeignKey("SmerID");

                    b.Navigation("Kurs");

                    b.Navigation("Smer");
                });

            modelBuilder.Entity("Elfind.Data.Models.NotifikacijaStudent", b =>
                {
                    b.HasOne("Elfind.Data.NotificationMessage", "Notifikacija")
                        .WithMany("Primaoci")
                        .HasForeignKey("NotifikacijaMsgID");

                    b.HasOne("Elfind.Data.Model.Student", "Student")
                        .WithMany("Notifikacije")
                        .HasForeignKey("StudentID");

                    b.Navigation("Notifikacija");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Elfind.Data.Models.ObjavaStudent", b =>
                {
                    b.HasOne("Elfind.Data.Model.Objava", "Objava")
                        .WithMany("Studenti")
                        .HasForeignKey("ObjavaID");

                    b.HasOne("Elfind.Data.Model.Student", "Student")
                        .WithMany("Objave")
                        .HasForeignKey("StudentID");

                    b.Navigation("Objava");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Elfind.Data.Models.Opcija", b =>
                {
                    b.HasOne("Elfind.Data.Model.Objava", "Anketa")
                        .WithMany("Opcije")
                        .HasForeignKey("AnketaID");

                    b.Navigation("Anketa");
                });

            modelBuilder.Entity("Elfind.Data.Models.OsobljeKurs", b =>
                {
                    b.HasOne("Elfind.Data.Model.Kurs", "Kurs")
                        .WithMany("NastavnoOsoblje")
                        .HasForeignKey("KursID");

                    b.HasOne("Elfind.Data.Model.NastavnoOsoblje", "NastavnoOsoblje")
                        .WithMany("Kursevi")
                        .HasForeignKey("NastavnoOsobljeID");

                    b.Navigation("Kurs");

                    b.Navigation("NastavnoOsoblje");
                });

            modelBuilder.Entity("Elfind.Data.Models.OsobljeProstorijaR", b =>
                {
                    b.HasOne("Elfind.Data.Model.NastavnoOsoblje", "NastavnoOsoblje")
                        .WithMany("RezProstorije")
                        .HasForeignKey("NastavnoOsobljeID");

                    b.HasOne("Elfind.Data.Model.Prostorija", "Prostorija")
                        .WithMany("NastavnoOsobljeR")
                        .HasForeignKey("ProstorijaID");

                    b.Navigation("NastavnoOsoblje");

                    b.Navigation("Prostorija");
                });

            modelBuilder.Entity("Elfind.Data.Models.OsobljeRaspored", b =>
                {
                    b.HasOne("Elfind.Data.Model.NastavnoOsoblje", "NastavnoOsoblje")
                        .WithMany("Raspored")
                        .HasForeignKey("NastavnoOsobljeID");

                    b.HasOne("Elfind.Data.Model.RasporedCasova", "RasporedCasova")
                        .WithMany("NastavnoOsoblje")
                        .HasForeignKey("RasporedCasovaID");

                    b.Navigation("NastavnoOsoblje");

                    b.Navigation("RasporedCasova");
                });

            modelBuilder.Entity("Elfind.Data.Models.Sprat", b =>
                {
                    b.HasOne("Elfind.Data.Model.Zgrada", "Zgrada")
                        .WithMany("Spratovi")
                        .HasForeignKey("ZgradaID");

                    b.Navigation("Zgrada");
                });

            modelBuilder.Entity("Elfind.Data.Models.StudentKurs", b =>
                {
                    b.HasOne("Elfind.Data.Model.Kurs", "Kurs")
                        .WithMany("Studenti")
                        .HasForeignKey("KursID");

                    b.HasOne("Elfind.Data.Model.Student", "Student")
                        .WithMany("Kursevi")
                        .HasForeignKey("StudentID");

                    b.Navigation("Kurs");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Elfind.Data.NotificationMessageProf", b =>
                {
                    b.HasOne("Elfind.Data.Model.NastavnoOsoblje", null)
                        .WithMany("Notifikacije")
                        .HasForeignKey("NastavnoOsobljeID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Elfind.Data.Model.Administrator", b =>
                {
                    b.Navigation("RasporediCasova");
                });

            modelBuilder.Entity("Elfind.Data.Model.Forum", b =>
                {
                    b.Navigation("Objave");
                });

            modelBuilder.Entity("Elfind.Data.Model.Kurs", b =>
                {
                    b.Navigation("Casovi");

                    b.Navigation("NastavnoOsoblje");

                    b.Navigation("Smerovi");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("Elfind.Data.Model.NastavnoOsoblje", b =>
                {
                    b.Navigation("Kursevi");

                    b.Navigation("Notifikacije");

                    b.Navigation("Objave");

                    b.Navigation("Raspored");

                    b.Navigation("RezProstorije");
                });

            modelBuilder.Entity("Elfind.Data.Model.Objava", b =>
                {
                    b.Navigation("Opcije");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("Elfind.Data.Model.Prostorija", b =>
                {
                    b.Navigation("NastavnoOsobljeR");

                    b.Navigation("NastavnoOsobljeUKancelariji");
                });

            modelBuilder.Entity("Elfind.Data.Model.RasporedCasova", b =>
                {
                    b.Navigation("NastavnoOsoblje");

                    b.Navigation("SpisakCasova");
                });

            modelBuilder.Entity("Elfind.Data.Model.Smer", b =>
                {
                    b.Navigation("Kursevi");
                });

            modelBuilder.Entity("Elfind.Data.Model.Student", b =>
                {
                    b.Navigation("Kursevi");

                    b.Navigation("Notifikacije");

                    b.Navigation("Objave");
                });

            modelBuilder.Entity("Elfind.Data.Model.Zgrada", b =>
                {
                    b.Navigation("Prostorije");

                    b.Navigation("Spratovi");
                });

            modelBuilder.Entity("Elfind.Data.Models.Sprat", b =>
                {
                    b.Navigation("ListaProstorija");
                });

            modelBuilder.Entity("Elfind.Data.NotificationMessage", b =>
                {
                    b.Navigation("Primaoci");
                });
#pragma warning restore 612, 618
        }
    }
}
